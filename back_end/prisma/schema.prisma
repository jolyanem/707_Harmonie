// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String   @db.Text
  client    String   @db.Text
  createdAt DateTime @default(now())

  categorySteps CategoryStep[]
}

model URS {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  code        String   @db.Text
  name        String   @db.Text
  type        String   @db.Text
  typeNeed    String   @db.Text
  description String   @db.Text
  processType String   @db.Text

  // STEP 1.3
  criticalityClient    String @db.Text
  regulatoryObligation String @db.Text
  businessObligation   String @db.Text

  // STEP 3.1
  operationalProcessLinks Link[]

  categoryStep   CategoryStep @relation(fields: [categoryStepId], references: [id])
  categoryStepId String

  steps Step[]

  supplierResponses SupplierResponse[]

  // STEP 8.4
  auditTrail   AuditTrail @relation(fields: [auditTrailId], references: [id])
  auditTrailId String     @unique

  risks Risk[]
}

model Link {
  id   String @id @default(uuid())
  name String @db.Text
  link String @db.Text

  URS   URS    @relation(fields: [URSId], references: [id])
  URSId String
}

model CategoryStep {
  id   String @id @default(uuid())
  name String @db.Text

  children CategoryStep[] @relation("ParentCategoryStep")
  parent   CategoryStep?  @relation("ParentCategoryStep", fields: [parentId], references: [id])
  parentId String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  URS URS[]
}

model Step {
  name      String    @db.Text
  status    String    @db.Text
  updatedAt DateTime?
  updatedBy String?   @db.Text

  URS   URS    @relation(fields: [URSId], references: [id], onDelete: Cascade)
  URSId String

  @@id([URSId, name])
}

model SupplierResponse {
  id              String  @id @default(uuid())
  name            String  @db.Text
  statut          Boolean @default(false)
  answer          String  @db.Text
  type            String  @db.Text // Custom or Standard
  customTmpsDev   Float   @default(0)
  customCost      Float   @default(0)
  customApprouved Boolean @default(false)

  URS   URS    @relation(fields: [URSId], references: [id])
  URSId String
}

model AuditTrail {
  id                  String  @id @default(uuid())
  consultation        Boolean
  consultationComment String  @db.Text
  revue               Boolean
  revueComment        String  @db.Text
  URS                 URS?
}

model Risk {
  id                    String @id @default(uuid())
  deficiencyDescription String @db.Text
  riskClass             String @db.Text
  consequence           String @db.Text
  impact                Int
  riskResidueLevel      String @db.Text
  comment               String @db.Text

  causes Cause[]

  tests Test[]

  actionPlan   ActionPlan @relation(fields: [actionPlanId], references: [id])
  actionPlanId String     @unique

  URS   URS    @relation(fields: [URSId], references: [id])
  URSId String
}

model Test {
  id            String @id @default(uuid())
  name          String @db.Text
  documentation String @db.Text
  comments      String @db.Text

  risk   Risk?   @relation(fields: [riskId], references: [id])
  riskId String?
}

model Cause {
  id          String @id @default(uuid())
  type        String @db.Text
  probability Int

  risk   Risk?   @relation(fields: [riskId], references: [id])
  riskId String?
}

model ActionPlan {
  id            String  @id @default(uuid())
  qiqo          Boolean
  documentation Boolean
  datamigration Boolean
  revueConfig   Boolean
  qp            Boolean

  Risk Risk?
}

enum Role {
  Client
  Collaborateur
}

enum Statut {
  Actif
  Inactif
}

model User {
  id            String @id @default(cuid())
  name          String @db.Text
  surname       String @db.Text
  email         String @unique @db.Text
  employerName  String @db.Text
  employerPhone String @db.Text
  role          Role
  statut        Statut
}
